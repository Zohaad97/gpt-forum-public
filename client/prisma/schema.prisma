generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String? @db.Text
  id_token           String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  sessions            Session[]
  conversationFolders ConversationFolder[]
}

model ConversationFolder {
  id            Int            @id @default(autoincrement())
  name          String
  icon          String?
  createdAt     DateTime       @default(now())
  conversations Conversation[]
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?
//   access_token       String? @db.Text
//   id_token           String? @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Conversation {
  id                   Int                 @id @default(autoincrement())
  title                String
  avatar               String?             @db.LongText
  private              Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  views                Int                 @default(0)
  messages             Message[]
  conversationFolderId Int?
  conversationFolder   ConversationFolder? @relation(fields: [conversationFolderId], references: [id], onDelete: Cascade)

  @@index([views(sort: Desc)])
  @@index([createdAt])
  @@index([private])
  @@fulltext([title])
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  content   String   @db.LongText
  from      Role     @default(human)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
}

enum Role {
  human
  gpt
}

// model Save {
//   id             String       @id @default(cuid())
//   conversationId String
//   conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
//   userId         String
//   user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt      DateTime     @default(now())

//   @@unique([conversationId, userId])
//   @@index([conversationId])
//   @@index([userId])
// }

// model Comment {
//   id              String       @id
//   conversationId  String
//   conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
//   userId          String
//   user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   content         String       @db.LongText
//   position        Int
//   parentCommentId String?
//   parentComment   Comment?     @relation("Thread", fields: [parentCommentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
//   childComments   Comment[]    @relation("Thread")
//   createdAt       DateTime     @default(now())
//   updatedAt       DateTime     @updatedAt

//   @@index([conversationId])
//   @@index([userId])
//   @@index([parentCommentId])
//   @@index([conversationId, parentCommentId])
//   @@index([conversationId, parentCommentId, createdAt])
//   @@index([conversationId, position])
//   @@index([conversationId, position, parentCommentId, createdAt])
// }
